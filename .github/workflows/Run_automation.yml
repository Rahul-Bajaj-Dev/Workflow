name: Automation

on:
  push:
    branches:
      - test3

jobs:
  check-webhook:
    runs-on: ubuntu-latest
    steps:

      - name: Extract Push Info
        run: |
          echo "Ref: ${{ github.ref }}"
          echo "Branch Name: ${{ github.ref_name }}"
          echo "Commit SHA: ${{ github.sha }}"
          echo "Pusher: ${{ github.actor }}"

      # Step 1: Publish Message to RabbitMQ
      - name: Publish Message to RabbitMQ
        run: |
          response=$(curl -u ${{ secrets.RABBITMQ_USER }}:${{ secrets.RABBITMQ_PASS }} \
            -H "Content-Type: application/json" \
            -d '{
                  "properties": {},
                  "routing_key": "Automation-test",
                  "payload": "PR #${{ github.sha }} from branch ${{ github.ref_name }} | flag=staging_qa",
                  "payload_encoding": "string"
                }' \
            -w "%{http_code}" -o response.txt \
            "${{ secrets.RABBITMQ_URL }}/api/exchanges/%2f/amq.default/publish")
          if [[ "$response" -eq 200 ]]; then 
            echo "Message Published Successfully"
          else
            echo "Message not published successfully. HTTP Status Code: $response"
            exit 1
          fi

      # Step 2: Polling for resuming the workflow
      - name: Polling for resuming the workflow
        run: |
          max_attempt=60
          delay=60
          workflow="waiting"
          Branch_Name=${{ github.ref_name }}
          Commit_SHA=${{ github.sha }}

          attempt=0
          while [ $attempt -lt $max_attempt ]; do
            echo "Polling attempt: $((attempt + 1))..."

            response1=$(curl -s "https://2929-2405-201-4041-182c-29b9-407b-3fb0-58a1.ngrok-free.app/webhook/workflow_status")
            echo "Polling response: $response1"

            branchNameFromResponse=$(echo "$response1" | jq -r '.Branch')
            commitShaFromResponse=$(echo "$response1" | jq -r '.Commit_SHA')

            if [[ "$branchNameFromResponse" == "$Branch_Name" && "$commitShaFromResponse" == "$Commit_SHA" ]]; then
              echo "Branch and Commit SHA match, waiting for post cleanup job and resuming workflow in 60 seconds."
              sleep 60
              workflow="resumed"
              break
            else
              echo "Branch and Commit SHA do not match, retrying..."
            fi

            sleep $delay
            attempt=$((attempt + 1))
          done

          if [[ "$workflow" != "resumed" ]]; then
            echo "Branch and Commit SHA did not match after $max_attempt attempts."
            exit 1
          fi

      # Step 3: Checkout the pushed code
      - name: Checkout the code
        uses: actions/checkout@v3

      # Step 4: Call webhook to initiate check
      - name: Call webhook to initiate check
        id: initiate-webhook
        run: |
          BRANCH_NAME=${{ github.ref_name }}
          COMMIT_SHA=${{ github.sha }}
          COMMIT_USERNAME=${{ github.actor }}

          echo "Branch Name: $BRANCH_NAME"
          echo "Commit SHA: $COMMIT_SHA"
          echo "Commit Author: $COMMIT_USERNAME"

          response=$(curl -s -X POST -H "Content-Type: application/json" \
            -d "{\"action\": \"check\", \
                  \"Pull Request Link\": \"N/A - push event\", \
                  \"Branch Name\": \"$BRANCH_NAME\", \
                  \"Commit Author\": \"$COMMIT_USERNAME\", \
                  \"Flag\": \"staging_qa\"}" \
            "https://2929-2405-201-4041-182c-29b9-407b-3fb0-58a1.ngrok-free.app/webhook/github-webhook")

          echo "response=$response" >> $GITHUB_ENV
          echo "Polling for result..."
          sleep 100

      # Step 5: Poll for Completion of test result
      - name: Poll for Completion of test result
        id: poll-webhook
        run: |
          max_attempts=60
          delay=30
          attempt=0

          while [ $attempt -lt $max_attempts ]; do
            echo "Polling attempt: $((attempt + 1))..."
            response=$(curl -s "https://2929-2405-201-4041-182c-29b9-407b-3fb0-58a1.ngrok-free.app/webhook/status")
            echo "Polling response: $response"

            status=$(echo "$response" | jq -r '.status')

            if [[ "$status" == "pass" ]]; then
              echo "Status is pass. Proceeding..."
              exit 0
            elif [[ "$status" == "fail" ]]; then
              echo "Status is fail. Exiting with error."
              exit 1
            else
              echo "Result not ready or unknown status, waiting..."
            fi

            sleep $delay
            attempt=$((attempt + 1))
          done

          echo "Timeout reached. Automation did not return pass or fail."
          exit 1

      # Step 6: Deploy to Azure Staging
      - name: Log in to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Build and deploy Container App
        uses: azure/container-apps-deploy-action@v1
        with:
          appSourcePath: ${{ github.workspace }}
          acrName: datalayeracr
          containerAppName: datalayer-staging
          resourceGroup: hyrr
          imageToBuild: datalayeracr.azurecr.io/staging:${{ github.sha }}
          imageToDeploy: datalayeracr.azurecr.io/staging:${{ github.sha }}
